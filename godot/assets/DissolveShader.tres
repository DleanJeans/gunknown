[gd_resource type="VisualShader" load_steps=12 format=2]

[ext_resource path="res://assets/NoiseTexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "dissolve"

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 3.14159 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 14

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 1

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[resource]
code = "shader_type spatial;
uniform sampler2D tex_frg_5;uniform float dissolve;



void vertex() {
// Sortie:0

}

void fragment() {
// Entr√©e:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	vec4 tex_frg_5_read = texture( tex_frg_5 , n_out2p0.xy );
	n_out5p0 = tex_frg_5_read.rgb;
	n_out5p1 = tex_frg_5_read.a;

// ScalarUniform:12
	float n_out12p0;
	n_out12p0 = dissolve;

// ScalarOp:16
	float n_in16p0 = 1.00000;
	float n_out16p0;
	n_out16p0 = n_in16p0 - n_out12p0;

// ScalarOp:13
	float n_in13p1 = 3.14159;
	float n_out13p0;
	n_out13p0 = n_out16p0 * n_in13p1;

// ScalarFunc:4
	float n_out4p0;
	n_out4p0 = cos(n_out13p0);

// ScalarOp:9
	float n_in9p1 = 2.00000;
	float n_out9p0;
	n_out9p0 = n_out4p0 / n_in9p1;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = dot(n_out5p0,vec3(0.333333,0.333333,0.333333)) - n_out9p0;

// ScalarOp:15
	float n_in15p1 = 0.50000;
	float n_out15p0;
	n_out15p0 = n_out6p0 + n_in15p1;

// ScalarFunc:14
	float n_out14p0;
	n_out14p0 = floor(n_out15p0);

// Sortie:0
	ALPHA = n_out14p0;

}

void light() {
// Sortie:0

}
"
graph_offset = Vector2( -562, 166 )
nodes/fragment/0/position = Vector2( 1020, 80 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 100, 120 )
nodes/fragment/4/node = SubResource( 6 )
nodes/fragment/4/position = Vector2( 60, 240 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( 260, 0 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( 460, 100 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 260, 220 )
nodes/fragment/12/node = SubResource( 1 )
nodes/fragment/12/position = Vector2( -560, 320 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( -160, 280 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 840, 80 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 680, 80 )
nodes/fragment/16/node = SubResource( 10 )
nodes/fragment/16/position = Vector2( -360, 260 )
nodes/fragment/connections = PoolIntArray( 2, 0, 5, 0, 5, 0, 6, 0, 4, 0, 9, 0, 9, 0, 6, 1, 13, 0, 4, 0, 6, 0, 15, 0, 15, 0, 14, 0, 14, 0, 0, 1, 12, 0, 16, 1, 16, 0, 13, 0 )
